class Solution {
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        
        int[] lengthArr = new int[s.length()];
        HashMap<Character, Integer> map = new HashMap<>();
        int k = 2;
        
        int start = 0;
        
        for(int i=0; i<s.length(); i++) {
            
            if(map.containsKey(s.charAt(i))) {
                map.put(s.charAt(i), map.get(s.charAt(i))+1);    
            }
            else {
                
                if(map.size()<k) {
                    map.put(s.charAt(i), 1);
                }
                else {
                    
                    map.put(s.charAt(i), 1);
                    
                    for(int j=start; j<=i; j++) {
                        
                        int temp = map.get(s.charAt(j)) - 1;
                        lengthArr[j] = i - j;
                            
                        if(temp==0) {
                            map.remove(s.charAt(j));
                            start = j + 1;
                            break;
                        }
                        else {
                            map.put(s.charAt(j), temp);
                        }
                            
                    }
                        
                }
                    
            }
            
        }
        
        for(int i=start; i<lengthArr.length; i++) {
            lengthArr[i] = lengthArr.length - i;
        }
        
        int maxLen = 0;
        for(int i=0; i<lengthArr.length; i++) {
            //System.out.println(lengthArr[i]);
            if(lengthArr[i]>maxLen) {
                maxLen = lengthArr[i];
            }
        }
        
        return maxLen;     
        
    }
}