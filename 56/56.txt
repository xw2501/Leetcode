/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        intervals.sort((i1, i2) -> Integer.compare(i1.start, i2.start));
        
        List<Interval> list = new ArrayList<>();
        int start = 0;
        int end = 0;
        
        while(intervals.size()>0) {
            start = intervals.get(0).start;
            end = intervals.remove(0).end;
            
            while(intervals.size()>0 && end>=intervals.get(0).start) {
                if(end<intervals.get(0).end) {
                    end = intervals.remove(0).end;
                    continue;
                }
                else {
                    intervals.remove(0);
                }
            }
            
            list.add(new Interval(start, end));
        }
        
        return list;
    }
}